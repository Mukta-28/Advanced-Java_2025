Day 2


Why HttpServlet classs is declared as abstract class BUT with 100 % concrete functionality ?

It is abstract because the implementations of key servicing methods have to be provided by (e.g. overridden by) servlet developer. Since it's abstract , it's instance can't be created.

A subclass of HttpServlet must override at least one method, usually one of these:

doGet, if the servlet supports HTTP GET requests
doPost, for HTTP POST requests
doPut, for HTTP PUT requests
doDelete, for HTTP DELETE requests
init and destroy, to manage resources that are held for the life of the servlet

If you extend the class without overriding any methods, you will get a useless servlet; i.e. it will  give an error response for all requests.(HTTP 405 : Method not implemented) .  So , if the class was not abstract, then any direct instance of HttpServlet would be useless.

So the reason for making the HttpServlet class abstract is to prevent a  programming error.

As a servlet developer , you can choose to override the functionality of your requirement (eg : doPost)
& ignore other methods. 

How to Protect a JDBC Application Against SQL Injection?



What is SQL Injection ?


 -  One of the top 10 security attacks as per OWASP (Open Web Application Security Project)

 - It is a type of cybersecurity vulnerability that allows an attacker to interfere with the queries an application sends to its database.

How It Works

If a web application improperly handles user input, an attacker can inject malicious SQL code into a query. This can allow them to:

View confidential data
Modify or delete data
Bypass login authentication
etc.


How it can happen in real world  ?

One of the ideal situations is when an application asks the user for input such as username or user id. The application opened up a vulnerable spot there. The SQL statement can be run unknowingly. An attacker takes advantage by injecting a payload that to be used as a part of the SQL query and processed by the database. 
eg in JDBC - 
String sql= select * FROM users where
   user_name = '" + uname + "' and password= '" + pass + "'";

Statement st=cn.createStatement();
stmt.executeQuery(sql);

This code is vulnerable to SQL injection attack because the input given to the SQL statement through the variable 'uname' and 'pass' can be manipulated 


String sql= select * from users where
   user_name = '" + uname + "' and password= '" + pass + "' OR 1;



This results in modifying the original SQL statement to a degree that enables one to bypasses authentication. This is a serious vulnerability and must be prevented from within the code.

Defence Against an SQL Injection Attack


Use PreparedStatement instead of a Statement. It sends a pre-compiled SQL statement to the database, rather than a string. This means that query and data are separately sent to the database. 

This prevents the root cause of the SQL injection attack, because in SQL injection, the idea is to mix code and data wherein the data is actually a part of the code faked as  data. 

In PreparedStatement, there are multiple setType() methods, such as setString(). These methods are used to filter special characters such as a quotation contained within the SQL statements.


 What is Java EE (Java Enterprise Edition)?
Version: Java EE 8
Vendor: Oracle / Sun Microsystems
Upgraded to: Jakarta EE 9 / 10
Maintained by: Eclipse Foundation

 Definition:
Java EE is a set of specifications that extends Java SE (Standard Edition) to support enterprise-level features like:

Distributed computing

Web services

 Purpose:
To provide a platform for building and deploying:

Large-scale

Multi-tiered

Scalable

Secure
Network applications

 What are Java EE Specifications?
Java EE defines contracts/rules for essential enterprise services. The implementation of these specs is handled by Java EE server vendors.

 Examples of Specifications:
Servlet API

JSP (Java Server Pages) API

Security

Connection Pooling

EJB (Enterprise Java Bean)



 What is an Enterprise Application?
An Enterprise Application (EA) is:

A large-scale software system

Operates in a corporate environment

Typically:

Server-side

Remotely deployed

Transactional

Multi-threaded

Scalable and complex

 Examples:
Online shopping & payment systems

Billing systems

Product catalogs

ERP, CRM, HRM

Business intelligence

IT service management

 Java EE Server Types
1. Web Server (e.g., Tomcat)
Implements:

Servlet API

JSP API

JNDI

Security

Connection pooling

2. Application Server
Includes:

Web Container + EJB Container

Full Java EE services implementation

 Java EE Server Vendors & Products:
Vendor	Web Server	App Server
Apache	Tomcat	TomEE
Oracle/Sun	-	Glassfish (Ref Impl)
Red Hat	-	JBoss / WildFly
Oracle/BEA	-	Oracle WebLogic
IBM	-	WebSphere

 Why Java EE?
1. Client Type Support
Thin clients (web browsers)

Thick clients (Java application clients)

Smart clients (mobile)

2. Server Independence
Java EE apps can be deployed on any Java EE-compliant server with identical behavior.

Spec & implementation are separated.

3. Pre-implemented Enterprise Services



What is a Dynamic Web Application?
A server-side application

Deployed on a web server

Services web clients

Uses HTTP/HTTPS

 Example URL:
bash
Copy
Edit
http://www.mybank.com:8080/banking
http: Application layer protocol

www.mybank.com: Hostname

8080: TCP Port (identifies service)

/banking: URI (starts with context path)

 Objective: Create & Deploy a Dynamic Web App on Tomcat
Test HTML content

I

 What is a Web Container (WC)?
A server-side JVM inside a web server that provides a runtime environment for:

Servlets

JSP

Filters

 Responsibilities of Web Container:
Create HttpRequest & HttpResponse objects

Manage servlet/JSP/filter life cycles

Provide services: naming, security, connection pooling

Handle multiple concurrent requests

Manage session tracking and state

Assist with page navigation

 What is web.xml (Deployment Descriptor)?
One per web application

Created by developer / IDE

Located in: WEB-INF (private folder)

Read by: Web Container

Read when: Application is deployed

 Contents:
Welcome page

Servlet mappings

Session settings

Security settings

 Why Servlets?
To add dynamic behavior to web applications.

 Servlet Jobs:
Process requests

Execute business logic

Generate dynamic responses

Manage DAO layer

Handle navigation

What is a Servlet?
A Java class (without main())

Life cycle managed by WC

Life Cycle Methods: init(), service(), destroy()
